import { TargetCamera } from "@babylonjs/core/Cameras/targetCamera";
import { MirrorTexture } from "@babylonjs/core/Materials/Textures/mirrorTexture";
import { RenderTargetTexture } from "@babylonjs/core/Materials/Textures/renderTargetTexture";
import { PostProcess } from "@babylonjs/core/PostProcesses/postProcess";
import "./oceanPostProcess.fragment";
/**
 * Option available in the Ocean Post Process.
 */
export interface IOceanPostProcessOptions {
    /**
     * The size of the reflection RTT (number if square, or {width: number, height:number} or {ratio:} to define a ratio from the main scene)
     */
    reflectionSize?: number | {
        width: number;
        height: number;
    } | {
        ratio: number;
    };
    /**
     * The size of the refraction RTT (number if square, or {width: number, height:number} or {ratio:} to define a ratio from the main scene)
     */
    refractionSize?: number | {
        width: number;
        height: number;
    } | {
        ratio: number;
    };
}
/**
 * OceanPostProcess helps rendering an infinite ocean surface that can reflect and refract environment.
 *
 * Simmply add it to your scene and let the nerd that lives in you have fun.
 * Example usage:
 *  var pp = new OceanPostProcess("myOcean", camera);
 *  pp.reflectionEnabled = true;
 *  pp.refractionEnabled = true;
 */
export declare class OceanPostProcess extends PostProcess {
    /**
     * Gets a boolean indicating if the real-time reflection is enabled on the ocean.
     */
    /**
    * Sets weither or not the real-time reflection is enabled on the ocean.
    * Is set to true, the reflection mirror texture will be used as reflection texture.
    */
    reflectionEnabled: boolean;
    /**
     * Gets a boolean indicating if the real-time refraction is enabled on the ocean.
     */
    /**
    * Sets weither or not the real-time refraction is enabled on the ocean.
    * Is set to true, the refraction render target texture will be used as refraction texture.
    */
    refractionEnabled: boolean;
    /**
     * Gets wether or not the post-processes is supported by the running hardware.
     * This requires draw buffer supports.
     */
    readonly isSupported: boolean;
    /**
     * This is the reflection mirror texture used to display reflections on the ocean.
     * By default, render list is empty.
     */
    reflectionTexture: MirrorTexture;
    /**
     * This is the refraction render target texture used to display refraction on the ocean.
     * By default, render list is empty.
     */
    refractionTexture: RenderTargetTexture;
    private _time;
    private _cameraRotation;
    private _cameraViewMatrix;
    private _reflectionEnabled;
    private _refractionEnabled;
    private _geometryRenderer;
    /**
     * Instantiates a new Ocean Post Process.
     * @param name the name to give to the postprocess.
     * @camera the camera to apply the post process to.
     * @param options optional object following the IOceanPostProcessOptions format used to customize reflection and refraction render targets sizes.
     */
    constructor(name: string, camera: TargetCamera, options?: IOceanPostProcessOptions);
    /**
     * Returns the appropriate defines according to the current configuration.
     */
    private _getDefines;
    /**
     * Computes the current camera rotation as the shader requires a camera rotation.
     */
    private _computeCameraRotation;
}
